import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/hooks/use-toast';

export const useTempPasswordSync = () => {
  const [loading, setLoading] = useState(false);

  const syncTemporaryPassword = async (userId: string, password: string): Promise<boolean> => {
    setLoading(true);
    
    try {
      console.log('=== INICIANDO SINCRONIZA√á√ÉO DE SENHA TEMPOR√ÅRIA ===');
      console.log('User ID:', userId);
      console.log('Password length:', password.length);
      
      // Chamar a edge function para sincronizar a senha
      const { data, error } = await supabase.functions.invoke('sync-temporary-password', {
        body: {
          user_id: userId,
          password: password
        }
      });

      console.log('Resposta da edge function:', { data, error });

      if (error) {
        console.error('Erro ao sincronizar senha tempor√°ria:', error);
        toast({
          title: "Erro na sincroniza√ß√£o",
          description: `Erro na edge function: ${error.message}`,
          variant: "destructive",
        });
        return false;
      }

      if (!data || !data.success) {
        const errorMessage = data?.error || 'Resposta inv√°lida da edge function';
        console.error('Falha na sincroniza√ß√£o:', errorMessage);
        toast({
          title: "Falha na sincroniza√ß√£o",
          description: errorMessage,
          variant: "destructive",
        });
        return false;
      }

      console.log('‚úÖ Senha tempor√°ria sincronizada com sucesso no Supabase Auth');
      
      // Verificar se a sincroniza√ß√£o funcionou testando login
      try {
        const { data: profile } = await supabase
          .from('profiles')
          .select('email')
          .eq('id', userId)
          .single();
        
        if (profile?.email) {
          console.log('üîç Testando autentica√ß√£o ap√≥s sincroniza√ß√£o...');
          // Teste r√°pido de autentica√ß√£o (n√£o vai logar de fato)
          const { error: testError } = await supabase.auth.signInWithPassword({
            email: profile.email,
            password: password
          });
          
          if (!testError) {
            console.log('‚úÖ Autentica√ß√£o confirmada - sincroniza√ß√£o bem-sucedida');
            toast({
              title: "Sincroniza√ß√£o bem-sucedida!",
              description: `Senha sincronizada para ${profile.email}. Login agora deve funcionar.`,
            });
          } else {
            console.log('‚ö†Ô∏è Sincroniza√ß√£o completa, mas autentica√ß√£o ainda falha:', testError.message);
            toast({
              title: "Sincroniza√ß√£o parcial",
              description: "Senha sincronizada, mas pode ser necess√°rio aguardar alguns segundos antes do login.",
              variant: "destructive",
            });
          }
          
          // Fazer logout imediatamente se conseguiu logar
          await supabase.auth.signOut();
        }
      } catch (testError) {
        console.log('N√£o foi poss√≠vel testar autentica√ß√£o:', testError);
      }
      
      return true;
    } catch (error) {
      console.error('Erro na sincroniza√ß√£o da senha tempor√°ria:', error);
      toast({
        title: "Erro na sincroniza√ß√£o",
        description: error instanceof Error ? error.message : "Erro desconhecido",
        variant: "destructive",
      });
      return false;
    } finally {
      setLoading(false);
    }
  };

  const syncUserByEmail = async (email: string): Promise<boolean> => {
    setLoading(true);
    
    try {
      console.log('Buscando dados do usu√°rio para sincroniza√ß√£o:', email);
      
      // Buscar dados do usu√°rio
      const { data: userData, error: userError } = await supabase
        .from('profiles')
        .select('id, temporary_password_hash, password_changed')
        .eq('email', email)
        .maybeSingle();

      if (userError) {
        console.error('Erro ao buscar usu√°rio:', userError);
        return false;
      }

      if (!userData || !userData.temporary_password_hash || userData.password_changed) {
        console.log('Usu√°rio n√£o possui senha tempor√°ria v√°lida');
        toast({
          title: "Aviso",
          description: "Usu√°rio n√£o possui senha tempor√°ria para sincronizar",
          variant: "destructive",
        });
        return false;
      }

      // Decodificar a senha tempor√°ria
      try {
        const decoded = atob(userData.temporary_password_hash);
        const saltPrefix = 'onoffice_salt_';
        
        if (!decoded.startsWith(saltPrefix)) {
          throw new Error('Hash inv√°lido');
        }

        // Extrair senha (remover salt e timestamp)
        const withoutPrefix = decoded.substring(saltPrefix.length);
        const lastUnderscoreIndex = withoutPrefix.lastIndexOf('_');
        
        if (lastUnderscoreIndex === -1) {
          throw new Error('Formato de hash inv√°lido');
        }

        const password = withoutPrefix.substring(0, lastUnderscoreIndex);
        
        // Sincronizar a senha
        const success = await syncTemporaryPassword(userData.id, password);
        
        if (success) {
          toast({
            title: "Sincroniza√ß√£o bem-sucedida",
            description: `Senha tempor√°ria sincronizada para ${email}`,
          });
        }
        
        return success;
      } catch (decodeError) {
        console.error('Erro ao decodificar senha tempor√°ria:', decodeError);
        toast({
          title: "Erro na sincroniza√ß√£o",
          description: "N√£o foi poss√≠vel decodificar a senha tempor√°ria",
          variant: "destructive",
        });
        return false;
      }
    } catch (error) {
      console.error('Erro na sincroniza√ß√£o por email:', error);
      return false;
    } finally {
      setLoading(false);
    }
  };

  return {
    syncTemporaryPassword,
    syncUserByEmail,
    loading
  };
};